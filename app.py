from flask import Flask, request, abort
from linebot import LineBotApi, WebhookHandler
from linebot.models import (
    TextMessage, MessageEvent, FlexSendMessage,
    BubbleContainer, BoxComponent, TextComponent,
    URIAction, ButtonComponent, ImageComponent
)
from google import genai

import re

# LINE API Access Token ‡πÅ‡∏•‡∏∞ Channel Secret
CHANNEL_ACCESS_TOKEN = 'Oz6x3Zse8dmKO5HWmiRy3aCa26v1aiRJWAFIcGXp/kvSE58NBWARFg1AUf0beFKgqj/+KavL0VJU6wtGOwc3Zf0UfgnAOLJnEBmUwExf6rbCBPz2wplzFtOUVDxo8HJ7RM7En2r4qYg9eBnQeeeWvQdB04t89/1O/w1cDnyilFU='
CHANNEL_SECRET = 'c9810af033f3b71c3575127651aa3045'

# ‡∏™‡∏£‡πâ‡∏≤‡∏á client ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Gemini API
client = genai.Client(api_key="AIzaSyDo2U64Wt4Kwcq7ei1U1TjeTkmmVaaYz1I")

# ‡∏™‡∏£‡πâ‡∏≤‡∏á LineBotApi ‡πÅ‡∏•‡∏∞ WebhookHandler
line_bot_api = LineBotApi(CHANNEL_ACCESS_TOKEN)
handler = WebhookHandler(CHANNEL_SECRET)

# ‡∏™‡∏£‡πâ‡∏≤‡∏á Flask app
app = Flask(__name__)

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ Gemini API ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏û‡∏•‡∏á

def generate_answer(question):
    prompt = f"""
‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏ï‡∏≠‡∏ö‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡∏ô‡πÅ‡∏ö‡∏ö‡∏™‡∏î‡πÉ‡∏™ ‡πÄ‡∏ä‡πà‡∏ô‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏ü‡∏ä‡∏±‡πà‡∏ô
- ‡∏ï‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö‡πÉ‡∏™‡πà‡∏≠‡∏¥‡πÇ‡∏°‡∏à‡∏¥ üéµüî•‚ù§Ô∏è‚ú®
- ‡∏°‡∏µ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô ‡πÄ‡∏ä‡πà‡∏ô üéß ‡πÄ‡∏û‡∏•‡∏á‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ üéß
- ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏û‡∏•‡∏á 2-3 ‡πÄ‡∏û‡∏•‡∏á ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏•‡∏¥‡∏á‡∏Å‡πå YouTube
- ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏•‡∏á‡πÑ‡∏ó‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏≤‡∏Å‡∏•‡∏Å‡πá‡πÑ‡∏î‡πâ
- ‡∏ï‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö‡∏ô‡πà‡∏≤‡∏£‡∏±‡∏Å ‡∏™‡∏î‡πÉ‡∏™ ‡∏Å‡∏£‡∏∞‡∏ï‡∏∏‡πâ‡∏ô‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏≤‡∏Å‡∏ü‡∏±‡∏á‡πÄ‡∏û‡∏•‡∏á
- ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡πÉ‡∏ô LINE

‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: {question}
‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏≠‡∏ö‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ:
‡πÄ‡∏û‡∏•‡∏á 1: ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏•‡∏á - ‡∏®‡∏¥‡∏•‡∏õ‡∏¥‡∏ô üëâ ‡∏•‡∏¥‡∏á‡∏Å‡πå YouTube
‡πÄ‡∏û‡∏•‡∏á 2: ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏•‡∏á - ‡∏®‡∏¥‡∏•‡∏õ‡∏¥‡∏ô üëâ ‡∏•‡∏¥‡∏á‡∏Å‡πå YouTube
"""
    response = client.models.generate_content(
        model="gemini-2.0-flash",
        contents=[prompt]
    )
    return response.text

# ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å Gemini ‡πÄ‡∏õ‡πá‡∏ô Flex Message ‡πÅ‡∏ö‡∏ö‡∏°‡∏µ‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏•‡∏¥‡∏á‡∏Å‡πå

def create_flex_message(answer_text):
    lines = [line for line in answer_text.split("\n") if "üëâ" in line]
    bubbles = []

    for line in lines:
        try:
            title_artist, link = line.split("üëâ")
            link = link.strip()
            video_id = re.search(r"v=([\w-]+)", link).group(1)
            image_url = f"https://i.ytimg.com/vi/{video_id}/hqdefault.jpg"

            title_artist = title_artist.strip()
            if "-" in title_artist:
                title, artist = title_artist.split("-", 1)
            else:
                title, artist = title_artist, ""

            bubble = BubbleContainer(
                hero=ImageComponent(
                    url=image_url,
                    size="full",
                    aspect_ratio="1:1",
                    aspect_mode="cover"
                ),
                body=BoxComponent(
                    layout="vertical",
                    contents=[
                        TextComponent(text=title.strip(), weight="bold", size="md", wrap=True),
                        TextComponent(text=f"üé§ {artist.strip()}", size="sm", color="#888888")
                    ]
                ),
                footer=BoxComponent(
                    layout="vertical",
                    contents=[
                        ButtonComponent(
                            style="primary",
                            color="#1DB954",
                            action=URIAction(label="‡∏ü‡∏±‡∏á‡πÄ‡∏•‡∏¢", uri=link)
                        )
                    ]
                )
            )
            bubbles.append(bubble)
        except:
            continue

    return FlexSendMessage(
        alt_text="üéß ‡πÄ‡∏û‡∏•‡∏á‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß‡∏à‡πâ‡∏≤~",
        contents={"type": "carousel", "contents": bubbles[:10]}
    )

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ LINE
@handler.add(MessageEvent, message=TextMessage)
def handle_message(event):
    user_message = event.message.text
    user_id = event.source.user_id

    print(f"Received message: {user_message} from {user_id}")

    answer = generate_answer(user_message)
    flex_msg = create_flex_message(answer)

    line_bot_api.reply_message(
        event.reply_token,
        flex_msg
    )

# Webhook endpoint
@app.route("/callback", methods=['POST'])
def callback():
    signature = request.headers['X-Line-Signature']
    body = request.get_data(as_text=True)

    try:
        handler.handle(body, signature)
    except Exception as e:
        print("Error:", e)
        abort(400)

    return 'OK'

# ‡∏£‡∏±‡∏ô‡πÅ‡∏≠‡∏õ
if __name__ == "__main__":
    app.run(host='0.0.0.0', port=5000)
