from google import genai
from linebot import LineBotApi, WebhookHandler
from linebot.models import TextSendMessage, MessageEvent, TextMessage
from flask import Flask, request, abort
import json
import re

# LINE API Access Token ‡πÅ‡∏•‡∏∞ Channel Secret
CHANNEL_ACCESS_TOKEN = 'Oz6x3Zse8dmKO5HWmiRy3aCa26v1aiRJWAFIcGXp/kvSE58NBWARFg1AUf0beFKgqj/+KavL0VJU6wtGOwc3Zf0UfgnAOLJnEBmUwExf6rbCBPz2wplzFtOUVDxo8HJ7RM7En2r4qYg9eBnQeeeWvQdB04t89/1O/w1cDnyilFU='
CHANNEL_SECRET = 'c9810af033f3b71c3575127651aa3045'

# ‡∏™‡∏£‡πâ‡∏≤‡∏á client ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Gemini API
client = genai.Client(api_key="AIzaSyDo2U64Wt4Kwcq7ei1U1TjeTkmmVaaYz1I")

# ‡∏™‡∏£‡πâ‡∏≤‡∏á LineBotApi ‡πÅ‡∏•‡∏∞ WebhookHandler
line_bot_api = LineBotApi(CHANNEL_ACCESS_TOKEN)
handler = WebhookHandler(CHANNEL_SECRET)

# ‡∏™‡∏£‡πâ‡∏≤‡∏á Flask app
app = Flask(__name__)

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ Gemini API
def generate_answer(question):
    prompt = (
        f"‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ü‡∏µ‡∏•‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô‡∏´‡∏ô‡∏±‡∏á coming-of-age ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ '{question}' "
        f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô 3 ‡πÄ‡∏û‡∏•‡∏á ‡πÑ‡∏ó‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏≤‡∏Å‡∏•‡∏Å‡πá‡πÑ‡∏î‡πâ ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö JSON ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô "
        f"‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö JSON:\n"
        f"[{{\"title\": \"‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏•‡∏á\", \"artist\": \"‡∏®‡∏¥‡∏•‡∏õ‡∏¥‡∏ô\", \"youtube_url\": \"‡∏•‡∏¥‡∏á‡∏Å‡πå YouTube\", \"reason\": \"‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏û‡∏•‡∏á‡∏ô‡∏µ‡πâ\"}}, ...]\n"
        f"‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: "
        f"[{{\"title\": \"Lover\", \"artist\": \"Taylor Swift\", \"youtube_url\": \"https://youtu.be/1i8oYSe2f9c\", \"reason\": \"‡πÄ‡∏û‡∏•‡∏á‡∏ô‡∏µ‡πâ‡πÄ‡∏ï‡πá‡∏°‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏Å‡πÇ‡∏£‡πÅ‡∏°‡∏ô‡∏ï‡∏¥‡∏Å‡πÅ‡∏•‡∏∞‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏´‡∏ß‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á Taylor\"}}]"
    )

    response = client.generate_content(
        model="gemini-2.0-flash",
        contents=[{"role": "user", "parts": [prompt]}]
    )
    return response.text

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
@handler.add(MessageEvent, message=TextMessage)
def handle_message(event):
    user_message = event.message.text
    user_id = event.source.user_id

    print(f"üì® User message: {user_message} from {user_id}")

    try:
        answer = generate_answer(user_message)
        print("[üß† Gemini response]:", answer)

        # ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÅ‡∏¢‡∏Å JSON ‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡∏≠‡∏ö
        try:
            json_text = re.search(r"\[.*\]", answer, re.DOTALL).group()
            songs = json.loads(json_text)

            formatted = ""
            for i, song in enumerate(songs, 1):
                formatted += f"{i}. üéµ {song['title']} - {song['artist']}\nüîó {song['youtube_url']}\nüí° {song['reason']}\n\n"

            response_message = f"üéß ‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ü‡∏µ‡∏• '{user_message}':\n\n{formatted.strip()}"

        except Exception as e:
            print("‚ö†Ô∏è JSON Decode Error:", e)
            response_message = f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å AI ‡πÑ‡∏î‡πâ:\n\n{answer}"

    except Exception as e:
        print("‚ùå ERROR:", e)
        response_message = f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}"

    # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô LINE
    line_bot_api.reply_message(
        event.reply_token,
        TextSendMessage(text=response_message)
    )

# Webhook URL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å LINE
@app.route("/callback", methods=['POST'])
def callback():
    signature = request.headers['X-Line-Signature']
    body = request.get_data(as_text=True)
    print("[üì© Callback received]", body)

    try:
        handler.handle(body, signature)
    except Exception as e:
        print("‚ùå Callback error:", e)
        abort(400)

    return 'OK'

# ‡∏£‡∏±‡∏ô Flask
if __name__ == "__main__":
    app.run(host='0.0.0.0', port=5000)

        model="gemini-2.0-flash",
        contents=[{"role": "user", "parts": [prompt]}]
    )
    return response.text

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
@handler.add(MessageEvent, message=TextMessage)
def handle_message(event):
    user_message = event.message.text
    user_id = event.source.user_id

    print(f"Received message: {user_message} from {user_id}")

    try:
        answer = generate_answer(user_message)

        try:
            songs = json.loads(answer)
            formatted = ""
            for i, song in enumerate(songs, 1):
                formatted += f"{i}. {song['title']} - {song['artist']}\n{song['youtube_url']}\nüí° {song['reason']}\n\n"
            response_message = f"üéß ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏û‡∏•‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö '{user_message}' üé∂\n\n{formatted}"
        except json.JSONDecodeError:
            response_message = f"‚ö†Ô∏è ‡∏Ç‡∏≠‡πÇ‡∏ó‡∏©‡∏Ñ‡∏£‡∏±‡∏ö ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å AI ‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö JSON ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£:\n\n{answer}"

    except Exception as e:
        response_message = f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}"

    line_bot_api.reply_message(event.reply_token, TextSendMessage(text=response_message.strip()))

# Webhook URL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å LINE
@app.route("/callback", methods=['POST'])
def callback():
    signature = request.headers['X-Line-Signature']
    body = request.get_data(as_text=True)

    try:
        handler.handle(body, signature)
    except Exception as e:
        print("Error:", e)
        abort(400)

    return 'OK'

if __name__ == "__main__":
    app.run(host='0.0.0.0', port=5000)
