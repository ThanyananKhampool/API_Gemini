from flask import Flask, request, abort
from linebot import LineBotApi, WebhookHandler
from linebot.models import (
    MessageEvent, TextMessage, TextSendMessage,
    TemplateSendMessage, CarouselTemplate, CarouselColumn, URITemplateAction
)
import json
import re
from google import genai

# LINE API Key ‡πÅ‡∏•‡∏∞ Gemini API Key
CHANNEL_ACCESS_TOKEN = 'Oz6x3Zse8dmKO5HWmiRy3aCa26v1aiRJWAFIcGXp/kvSE58NBWARFg1AUf0beFKgqj/+KavL0VJU6wtGOwc3Zf0UfgnAOLJnEBmUwExf6rbCBPz2wplzFtOUVDxo8HJ7RM7En2r4qYg9eBnQeeeWvQdB04t89/1O/w1cDnyilFU='
CHANNEL_SECRET = 'c9810af033f3b71c3575127651aa3045'
GEMINI_API_KEY = "AIzaSyDo2U64Wt4Kwcq7ei1U1TjeTkmmVaaYz1I"

# Initial setup
client = genai.Client(api_key=GEMINI_API_KEY)
line_bot_api = LineBotApi(CHANNEL_ACCESS_TOKEN)
handler = WebhookHandler(CHANNEL_SECRET)
app = Flask(__name__)

# ‡πÅ‡∏õ‡∏•‡∏á YouTube URL ‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏û Thumbnail
def extract_youtube_thumbnail(url):
    match = re.search(r"(?:v=|be/)([\w-]+)", url)
    if match:
        video_id = match.group(1)
        return f"https://img.youtube.com/vi/{video_id}/hqdefault.jpg"
    return "https://i.imgur.com/E8KZ2sT.png"  # fallback image

# ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Gemini ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏û‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô JSON
def generate_answer(question):
    prompt = f"""
‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏û‡∏•‡∏á‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°: "{question}"

‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏û‡∏•‡∏á‡∏°‡∏≤ 5 ‡πÄ‡∏û‡∏•‡∏á ‡πÇ‡∏î‡∏¢‡πÉ‡∏´‡πâ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö JSON ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÄ‡∏â‡∏û‡∏≤‡∏∞:
- "title": ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏•‡∏á
- "url": ‡∏•‡∏¥‡∏á‡∏Å‡πå YouTube

‡∏´‡πâ‡∏≤‡∏°‡πÉ‡∏™‡πà‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° ‡∏´‡πâ‡∏≤‡∏°‡∏°‡∏µ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠ ‡∏´‡πâ‡∏≤‡∏°‡∏û‡∏π‡∏î‡∏Ñ‡∏∏‡∏¢ ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö JSON ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô

‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:
[
  {{"title": "Shape of You", "url": "https://youtube.com/watch?v=JGwWNGJdvx8"}},
  {{"title": "Lover", "url": "https://youtube.com/watch?v=-BjZmE2gtdo"}}
]
"""
    response = client.models.generate_content(
        model="gemini-2.0-flash",
        contents=[prompt]
    )

    # Debug: ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏¥‡∏ö‡∏à‡∏≤‡∏Å Gemini
    print("üß† Gemini raw response:\n", response.text)

    try:
        songs = json.loads(response.text)
        return songs
    except Exception as e:
        print("‚ö†Ô∏è JSON parsing error:", e)
        return []

# ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ LINE
@handler.add(MessageEvent, message=TextMessage)
def handle_message(event):
    user_message = event.message.text
    songs = generate_answer(user_message)

    if not songs:
        line_bot_api.reply_message(
            event.reply_token,
            TextSendMessage(text="‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏û‡∏•‡∏á‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ üò¢")
        )
        return

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á CarouselTemplate ‡∏à‡∏≤‡∏Å‡πÄ‡∏û‡∏•‡∏á
    columns = []
    for song in songs[:10]:  # ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 10 ‡∏Å‡∏•‡πà‡∏≠‡∏á
        thumbnail = extract_youtube_thumbnail(song["url"])
        columns.append(CarouselColumn(
            thumbnail_image_url=thumbnail,
            title=song["title"][:40],
            text="‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ü‡∏±‡∏á‡∏ö‡∏ô YouTube",
            actions=[URITemplateAction(label="‡∏ü‡∏±‡∏á‡πÄ‡∏û‡∏•‡∏á", uri=song["url"])]
        ))

    carousel_template = CarouselTemplate(columns=columns)
    message = TemplateSendMessage(
        alt_text='üéµ ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏≤‡∏à‡∏ä‡∏≠‡∏ö',
        template=carousel_template
    )

    line_bot_api.reply_message(event.reply_token, message)

# Webhook ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö LINE
@app.route("/callback", methods=['POST'])
def callback():
    signature = request.headers['X-Line-Signature']
    body = request.get_data(as_text=True)

    try:
        handler.handle(body, signature)
    except Exception as e:
        print("‚ùå LINE handler error:", e)
        abort(400)

    return 'OK'

# Run app
if __name__ == "__main__":
    app.run(host='0.0.0.0', port=5000)
