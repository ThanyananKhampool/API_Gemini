from google import genai
from linebot import LineBotApi, WebhookHandler
from linebot.models import TextSendMessage, MessageEvent, TextMessage, URIAction, CarouselColumn, CarouselTemplate, TemplateSendMessage
from flask import Flask, request, abort

# LINE API Access Token ‡πÅ‡∏•‡∏∞ Channel Secret
CHANNEL_ACCESS_TOKEN = 'YOUR_ACCESS_TOKEN'
CHANNEL_SECRET = 'YOUR_CHANNEL_SECRET'

# ‡∏™‡∏£‡πâ‡∏≤‡∏á client ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Gemini API
client = genai.Client(api_key="YOUR_API_KEY")

# ‡∏™‡∏£‡πâ‡∏≤‡∏á LineBotApi ‡πÅ‡∏•‡∏∞ WebhookHandler
line_bot_api = LineBotApi(CHANNEL_ACCESS_TOKEN)
handler = WebhookHandler(CHANNEL_SECRET)

# ‡∏™‡∏£‡πâ‡∏≤‡∏á Flask app
app = Flask(__name__)

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ Gemini API
def generate_answer(question):
    prompt = (
        f"‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢‡∏•‡∏∂‡∏Å‡∏ã‡∏∂‡πâ‡∏á‡πÅ‡∏•‡∏∞‡∏™‡∏∞‡∏ó‡πâ‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏±‡∏ß‡∏ï‡∏ô "
        f"‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏Ç‡∏≠‡∏á‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 'coming-of-age' ‡∏ã‡∏∂‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡πÅ‡∏•‡∏∞‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏ú‡∏ä‡∏¥‡∏ç‡∏Å‡∏±‡∏ö "
        f"‡∏≠‡∏∏‡∏õ‡∏™‡∏£‡∏£‡∏Ñ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏û‡∏ö‡πÇ‡∏•‡∏Å‡πÉ‡∏´‡∏°‡πà ‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏∞‡∏ó‡πâ‡∏≠‡∏ô‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÉ‡∏ô‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï "
        f"‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏û‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏≤‡πÄ‡∏ú‡∏ä‡∏¥‡∏ç‡∏Å‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÉ‡∏ô‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï ‡πÄ‡∏ä‡πà‡∏ô ‡∏Å‡∏≤‡∏£‡∏Å‡πâ‡∏≤‡∏ß‡∏û‡πâ‡∏ô "
        f"‡∏ß‡∏±‡∏¢‡πÄ‡∏î‡πá‡∏Å‡πÑ‡∏õ‡∏™‡∏π‡πà‡∏ß‡∏±‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏´‡∏ç‡πà ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏ñ‡∏∂‡∏á‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï "
        f"‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏ó‡∏≥‡∏ô‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏ß‡∏¢‡∏™‡∏∞‡∏ó‡πâ‡∏≠‡∏ô‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏ô‡∏µ‡πâ ‡πÅ‡∏•‡∏∞‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á‡πÄ‡∏û‡∏•‡∏á‡πÑ‡∏ó‡∏¢‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏•‡∏á‡∏™‡∏≤‡∏Å‡∏• "
        f"‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö JSON ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤‡πÅ‡∏•‡∏∞‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÉ‡∏ô LINE"
        f"\n‡πÇ‡∏õ‡∏£‡∏î‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ 3 ‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ü‡∏µ‡∏• 'coming-of-age' ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ö‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏û‡∏•‡∏á‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô"
    )

    response = client.models.generate_content(
        model="gemini-2.0-flash",  # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
        contents=[prompt]  # ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏µ prompt ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏•
    )
    return response.text

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
@handler.add(MessageEvent, message=TextMessage)
def handle_message(event):
    user_message = event.message.text
    user_id = event.source.user_id

    print(f"üì® User message: {user_message} from {user_id}")

    try:
        # ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á Gemini API
        answer = generate_answer(user_message)
        print("[üß† Gemini response]:", answer)

        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÅ‡∏•‡∏∞‡∏•‡∏¥‡∏á‡∏Ñ‡πå YouTube
        song1 = {"title": "‡πÄ‡∏û‡∏•‡∏á A", "link": "https://www.youtube.com/watch?v=song_link_A", "reason": "‡∏™‡∏∞‡∏ó‡πâ‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡πÉ‡∏ô‡∏ß‡∏±‡∏¢‡∏£‡∏∏‡πà‡∏ô"}
        song2 = {"title": "‡πÄ‡∏û‡∏•‡∏á B", "link": "https://www.youtube.com/watch?v=song_link_B", "reason": "‡∏û‡∏π‡∏î‡∏ñ‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡πâ‡∏≤‡∏ß‡∏ú‡πà‡∏≤‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏•‡∏±‡∏ß"}
        song3 = {"title": "‡πÄ‡∏û‡∏•‡∏á C", "link": "https://www.youtube.com/watch?v=song_link_C", "reason": "‡πÄ‡∏ï‡πá‡∏°‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢‡∏≠‡∏≤‡∏£‡∏°‡∏ì‡πå‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏´‡∏°‡πà"}

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á Carousel Template ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏û‡∏•‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏•‡∏¥‡∏á‡∏Ñ‡πå
        carousel_columns = [
            CarouselColumn(
                title=song1['title'],
                text=song1['reason'],
                actions=[URIAction(label="‡∏ü‡∏±‡∏á‡πÄ‡∏û‡∏•‡∏á‡∏ô‡∏µ‡πâ", uri=song1['link'])]
            ),
            CarouselColumn(
                title=song2['title'],
                text=song2['reason'],
                actions=[URIAction(label="‡∏ü‡∏±‡∏á‡πÄ‡∏û‡∏•‡∏á‡∏ô‡∏µ‡πâ", uri=song2['link'])]
            ),
            CarouselColumn(
                title=song3['title'],
                text=song3['reason'],
                actions=[URIAction(label="‡∏ü‡∏±‡∏á‡πÄ‡∏û‡∏•‡∏á‡∏ô‡∏µ‡πâ", uri=song3['link'])]
            )
        ]

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á Template ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° Carousel
        carousel_template = CarouselTemplate(columns=carousel_columns)
        template_message = TemplateSendMessage(
            alt_text='‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì',
            template=carousel_template
        )

        # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° Carousel ‡πÑ‡∏õ‡∏¢‡∏±‡∏á LINE
        line_bot_api.reply_message(
            event.reply_token,
            template_message
        )

    except Exception as e:
        print("‚ùå ERROR:", e)
        response_message = f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}"

        line_bot_api.reply_message(
            event.reply_token,
            TextSendMessage(text=response_message)
        )

# Webhook URL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å LINE
@app.route("/callback", methods=['POST'])
def callback():
    signature = request.headers['X-Line-Signature']
    body = request.get_data(as_text=True)
    print("[üì© Callback received]", body)

    try:
        handler.handle(body, signature)
    except Exception as e:
        print("‚ùå Callback error:", e)
        abort(400)

    return 'OK'

# ‡∏£‡∏±‡∏ô Flask
if __name__ == "__main__":
    app.run(host='0.0.0.0', port=5000)
